<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;


/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
	public function myFindAll()
	{
		//Méthode1 : en passant l'EntityManager
		$queryBuilder = $this->_em->createQueryBuilder()
			->select('a')
			->from($this->_entityName, 'a');
		
		// Dans un repository, $this->_entityName est le namespace de l'entité gérée
		// Ici, il vaut donc OC\PlatformBundle\Entity\Advert
			
		// Méthode 2 : en passant par le raccourci Recommandé !!!!!
		$queryBuilder = $this->createQueryBuilder('a');
		
		// On n'ajoute pas de critère ou tri particulier, la construction
		// de notre requête est finie
		
		// On récupère la Query à partir du QueryBuilder
		$query = $queryBuilder->getQuery();
		
		//On récupère les résultats
		$results = $query->getResult();
		
		//On retourne les résultats
		return $results;
	}
	
	public function myFindOne($id)
	{
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.id = :id')->setParameter('id', $id);
		
		return $qb->getQuery()->getResult();
		
	}
	
	public function findByAuthorAndDate($author, $date)
	{
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.author = :author')
				->setParameter(':author', $author)
			->andWhere('a.date = :date')
				->setParameter(':date', $date)
			->orderBy('a.date', 'DESC');
		
		return $qb->getQuery()->getResult();
	}
	
	public function whereCurrentYear(QueryBuilder $qb)
	{
		$qb->andWhere('a.date BETWEEN :start and :end')
			->setParameter(':start', new \DateTime(date('Y').'-01.01'))
			->setParameter(':end', new \DateTime(date('Y').'12-31'));
	}
	
	public function myFindAllDQL()
	{
		$query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a');
		$result = $query->getResult();
		
		return $result;
	}
	
	public function getAvertWithApplication()
	{
		$qb = $this->createQueryBuilder('a')
			->leftJoin('a.application', 'app')
			->addSelect('app');
		
			return $qb->getQuery()->getResult();
	}
	//Exercices
	public function getAvertWithCategories(array $categoryName)
	{
		$qb = $this->createQueryBuilder('a');
		
		// On fait une jointure avec l'entité Category avec pour alias « c »
		$qb
		->innerJoin('a.categories', 'c')
		->addSelect('c')
		;
		
		// Puis on filtre sur le nom des catégories à l'aide d'un IN
		$qb->where($qb->expr()->in('c.name', $categoryName));
		// La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine
		
		// Enfin, on retourne le résultat
		return $qb
		->getQuery()
		->getResult()
		;
	}
	
}
